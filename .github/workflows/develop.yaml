name: "Develop"

on:
  workflow_dispatch:
  push:
    branches: ["develop"]

jobs:
  Validate-Jobs:
    runs-on: ${{ VARS.RUNS_ON_SELF_HOST }}
    environment: dev
    steps:
      - run: echo "Validate Jobs"

  Checkout-Code:
    needs: ["Validate-Jobs"]
    uses: PTTGC-DevSecOps/global-pipeline/.github/workflows/Checkout_Code.yml@main
    with:
      runs_on_host: ${{ VARS.RUNS_ON_SELF_HOST }}

  Unit-Test:
    needs: ["Checkout-Code"]
    uses: PTTGC-DevSecOps/global-pipeline/.github/workflows/Unit_Test.yml@main
    with:
      allow_failure: ${{ fromJSON(VARS.ALLOW_FAILURE_UNIT_TEST) }}
      runs_on_host: ${{ VARS.RUNS_ON_SELF_HOST }}
      app_language: ${{ VARS.APP_LANGUAGE }}
      language_version: ${{ VARS.LANGUAGE_VERSION }}
      shell_type: "bash"

  Quality-Analysis-Sonar-Qube:
    needs: ["Unit-Test"]
    uses: PTTGC-DevSecOps/global-pipeline/.github/workflows/Quality_Analysis_Sonar_Qube.yml@main
    with:
      allow_failure: ${{ fromJSON(VARS.ALLOW_FAILURE_QUALITY_CODE_SCAN) }}
      runs_on_host: ${{ VARS.RUNS_ON_SELF_HOST }}
      sonar_properties_file_path: ${{ VARS.SONAR_PROPERTIES_FILE_PATH }}
    secrets: inherit

  # SAST-Coverity:
    # needs: ["Unit-Test"]
    # uses: PTTGC-DevSecOps/global-pipeline/.github/workflows/SAST_Coverity.yml@main
    # with:
      # allow_failure: ${{ fromJSON(VARS.ALLOW_FAILURE_SAST_COVERITY) }}
      # runs_on_host: ${{ VARS.RUNS_ON_SELF_HOST }}
      # app_language: ${{ VARS.APP_LANGUAGE }}
      # language_version: ${{ VARS.LANGUAGE_VERSION }}
      # build_command: ${{ VARS.BUILD_COMMAND }}
    # secrets: inherit

  # SCA-Blackduck:
    # needs: ["Unit-Test"]
    # uses: PTTGC-DevSecOps/global-pipeline/.github/workflows/SCA_Blackduck.yml@main
    # with:
      # allow_failure: ${{ fromJSON(VARS.ALLOW_FAILURE_SCA_BLACK_DUCK) }}
      # runs_on_host: ${{ VARS.RUNS_ON_SELF_HOST }}
      # app_language: ${{ VARS.APP_LANGUAGE }}
      # language_version: ${{ VARS.LANGUAGE_VERSION }}
    # secrets: inherit

  Build-Container:
    needs: ["Quality-Analysis-Sonar-Qube"]
    uses: PTTGC-DevSecOps/global-pipeline/.github/workflows/Build_Container.yml@main
    with:
      runs_on_host: ${{ VARS.RUNS_ON_SELF_HOST }}
      image_repo_url: ${{ VARS.DEV_IMAGE_RELEASE_REPO_URL }}
      deploy_on_env: "dev"
      shell_type: "bash"
    secrets:
      IMAGE_REPO_PASSWORD: ${{ secrets.DEV_ASP_CLIENT_SECRET }}
      IMAGE_REPO_USERNAME: ${{ secrets.DEV_ASP_CLIENT_ID }}

  Image-Scan-Security-Trivy:
    needs: ["Build-Container"]
    uses: PTTGC-DevSecOps/global-pipeline/.github/workflows/Image_Security_Scan_Trivy.yml@main
    with:
      runs_on_host: ${{ VARS.RUNS_ON_SELF_HOST }}
      allow_failure: ${{ fromJSON(VARS.ALLOW_FAILURE_IMAGE_SCAN_TRIVY) }}
      deploy_on_env: "dev"
      shell_type: "bash"
      image_repo_url: ${{ VARS.DEV_IMAGE_RELEASE_REPO_URL }}
      image_repo_provider: 'acr'
    secrets:
      IMAGE_REPO_USERNAME: ${{ secrets.DEV_ASP_CLIENT_ID }}
      IMAGE_REPO_PASSWORD: ${{ secrets.DEV_ASP_CLIENT_SECRET }}

  Deploy-DEV:
    needs: ["Image-Scan-Security-Trivy"]
    uses: PTTGC-DevSecOps/global-pipeline/.github/workflows/Deploy_AKS.yml@main
    with:
      runs_on_host: ${{ VARS.RUNS_ON_SELF_HOST }}
      deploy_on_env: "dev"
      image_repo_url: ${{ VARS.DEV_IMAGE_RELEASE_REPO_URL }}
      aks_resource_group_name: ${{ VARS.DEV_AKS_RESOURCE_GROUP_NAME }}
      aks_name: ${{ VARS.DEV_AKS_NAME }}
      helm_chart_repo: ${{ VARS.HELM_CHART_REPO }}
    secrets:
      AZ_ASP_CLIENT_ID: ${{ secrets.DEV_ASP_CLIENT_ID }}
      AZ_ASP_CLIENT_SECRET: ${{ secrets.DEV_ASP_CLIENT_SECRET }}
      AZ_TENANT_ID: ${{ secrets.DEV_ASP_TENANT_ID }}
      AZ_SUBSCRIPTION_ID: ${{ secrets.DEV_ASP_SUB_ID }}
      HELM_REPO_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

  Health-Check-DEV:
    needs: ["Deploy-DEV"]
    uses: PTTGC-DevSecOps/global-pipeline/.github/workflows/Health_Check.yml@main
    with:
      runs_on_host: ${{ VARS.RUNS_ON_SELF_HOST }}
      allow_failure: ${{ fromJSON(VARS.ALLOW_FAILURE_HEALTH_CHECK_DEV) }}
      hostname: ${{ VARS.DEV_HOSTNAME }}
      protocol: ${{ VARS.DEV_PROTOCOL == null && 'https' || VARS.DEV_PROTOCOL }}
      path: ${{ VARS.DEV_PATH == null && '/alive' || VARS.DEV_PATH }}

  # Automate-Test-DEV:
    # needs: ["Health-Check-DEV"]
    # uses: PTTGC-DevSecOps/global-pipeline/.github/workflows/Automate_Test_Robot_Framework.yml@main
    # with:
      # runs_on_host: ${{ VARS.RUNS_ON_SELF_HOST }}
      # allow_failure: ${{ fromJSON(VARS.ALLOW_FAILURE_AUTOMATE_TEST_DEV) }}
      # deploy_on_env: "dev"
      # hostname: ${{ VARS.DEV_HOSTNAME }}
      # protocol: ${{ VARS.DEV_PROTOCOL == null && 'https' || VARS.DEV_PROTOCOL }}

  Start-QAS:
    needs: ["Health-Check-DEV"]
    uses: PTTGC-DevSecOps/global-pipeline/.github/workflows/Manual_Start.yml@main
    with:
      runs_on_host: ${{ VARS.RUNS_ON_SELF_HOST }}
      manual_start_on_env: "qas"

  Deploy-QAS:
    needs: ["Start-QAS"]
    uses: PTTGC-DevSecOps/global-pipeline/.github/workflows/Deploy_AKS.yml@main
    with:
      runs_on_host: ${{ VARS.RUNS_ON_SELF_HOST }}
      deploy_on_env: "qas"
      image_repo_url: ${{ VARS.QAS_IMAGE_RELEASE_REPO_URL }}
      aks_resource_group_name: ${{ VARS.QAS_AKS_RESOURCE_GROUP_NAME }}
      aks_name: ${{ VARS.QAS_AKS_NAME }}
      helm_chart_repo: ${{ VARS.HELM_CHART_REPO }}
    secrets:
      AZ_ASP_CLIENT_ID: ${{ secrets.QAS_ASP_CLIENT_ID }}
      AZ_ASP_CLIENT_SECRET: ${{ secrets.QAS_ASP_CLIENT_SECRET }}
      AZ_TENANT_ID: ${{ secrets.QAS_ASP_TENANT_ID }}
      AZ_SUBSCRIPTION_ID: ${{ secrets.QAS_ASP_SUB_ID }}
      HELM_REPO_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

  Health-Check-QAS:
    needs: ["Deploy-QAS"]
    uses: PTTGC-DevSecOps/global-pipeline/.github/workflows/Health_Check.yml@main
    with:
      runs_on_host: ${{ VARS.RUNS_ON_SELF_HOST }}
      allow_failure: ${{ fromJSON(VARS.ALLOW_FAILURE_HEALTH_CHECK_QAS) }}
      hostname: ${{ VARS.QAS_HOSTNAME }}
      protocol: ${{ VARS.QAS_PROTOCOL == null && 'https' || VARS.QAS_PROTOCOL }}
      path: ${{ VARS.DEV_PATH == null && '/' || VARS.DEV_PATH }}

  # Automate-Test-QAS:
  #   needs: ["Health-Check-QAS"]
  #   uses: PTTGC-DevSecOps/global-pipeline/.github/workflows/Automate_Test_Robot_Framework.yml@main
  #   with:
  #     runs_on_host: ${{ VARS.RUNS_ON_SELF_HOST }}
  #     allow_failure: ${{ fromJSON(VARS.ALLOW_FAILURE_AUTOMATE_TEST_QAS) }}
  #     deploy_on_env: "qas"
  #     hostname: ${{ VARS.QAS_HOSTNAME }}
  #     protocol: ${{ VARS.QAS_PROTOCOL == null && 'https' || VARS.QAS_PROTOCOL }}

  # Owasp-Zap:
  #   needs:
  #     ["Automate-Test-QAS"]
  #   uses: PTTGC-DevSecOps/global-pipeline/.github/workflows/DAST_Owasp_Zap.yml@main
  #   with:
  #     allow_failure: ${{ fromJSON(VARS.ALLOW_FAILURE_DAST_OWASP_ZAP) }}
  #     runs_on_host: ${{ VARS.RUNS_ON_SELF_HOST }}
  #     hostname: ${{ VARS.QAS_HOSTNAME }}
  #   secrets: inherit
